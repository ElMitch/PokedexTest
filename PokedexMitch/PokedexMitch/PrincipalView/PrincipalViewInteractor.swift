//
//  PrincipalViewInteractor.swift
//  PokedexMitch
//
//  Created by Mitchell Samaniego on 07/02/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PrincipalViewBusinessInterface {
    func fetchPokemons(request: PrincipalViewModels.FetchPokemonList.Request)
    func fetchFilteredPokemons(request: PrincipalViewModels.FetchFilteredPokemonList.Request)
    func fetchPokemonsOfType(request: PrincipalViewModels.FetchPokemonType.Request)
}

protocol PrincipalViewDataStore {
    // var name: String { get set }
}

class PrincipalViewInteractor: PrincipalViewBusinessInterface, PrincipalViewDataStore {
    var presenter: PrincipalViewPresentationInterface?
    var worker = PrincipalViewWorker()
    // var name: String = ""
    
    // MARK: Do something
    
    func fetchPokemons(request: PrincipalViewModels.FetchPokemonList.Request) {
        var response = PrincipalViewModels.FetchPokemonList.Response()

        worker.fetchPokemonListData(request: request) { result in
            switch result {
            case .success(let listResponse):
                response.pokemonList = listResponse
            case .failure(let error):
                response.error = error
            }
            self.presenter?.presentPokemonList(response: response)
        }
    }

    func fetchFilteredPokemons(request: PrincipalViewModels.FetchFilteredPokemonList.Request) {
        var response = PrincipalViewModels.FetchFilteredPokemonList.Response()

        worker.fetchFilteredPokemonList(request: request) { result in
            switch result {
            case .success(let pokemonResponse):
                response.pokemon = pokemonResponse
            case .failure(let error):
                response.error = error
            }
            self.presenter?.presentPokemonFiltered(response: response)
        }
    }

    func fetchPokemonsOfType(request: PrincipalViewModels.FetchPokemonType.Request) {
        var response = PrincipalViewModels.FetchPokemonType.Response()
        
        worker.fetchPokemonsForType(request: request) { result in
            switch result {
            case .success(let typeOfPokemonResponse):
                response.pokemons = typeOfPokemonResponse
            case .failure(let error):
                response.error = error
            }
            self.presenter?.presentPokemonsOfType(response: response)
        }
    }
}
